<?php

use Drupal\Core\StringTranslation;
use Drupal\datetime\Plugin\Field\FieldType\DateTimeItemInterface;


include_once 'inc/utils.inc';

function ipu_tweaks_template_preprocess_default_variables_alter(&$variables) {
  $current_path = \Drupal::service('path.current')->getPath();
  $variables['current_path'] = $current_path;
}

function ipu_tweaks_page_attachments(array &$attachments) {
  $theme = \Drupal::theme()->getActiveTheme()->getName();
  //print $theme;
  if ($theme == 'adminimal_theme') {
    $attachments['#attached']['library'][] = 'ipu_tweaks/extra-admin';
  }

  /* Override ultimenu as per https://www.drupal.org/project/ultimenu/issues/2682125
   * Tweak the js to target the relevant menu
  */
  if ($theme == 'ipu') {
    $attachments['#attached']['library'][] = 'ipu_tweaks/ultimenu-override';
  }
}

/* Add current language to all templates */
function ipu_tweaks_preprocess(&$variables) {
  $variables['language_id'] = \Drupal::languageManager()
    ->getCurrentLanguage('language_content')
    ->getId();
}


function ipu_tweaks_preprocess_paragraph(&$variables) {
  /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
  // Placeholder for amending paragraphs
  //$paragraph = $variables['paragraph'];
  //$parentBundle = $paragraph->getParentEntity()->bundle();
}

function ipu_tweaks_preprocess_paragraph__event_sub_page(&$variables) {
  /* Add the (unique) paragraph id to each para for targeting as tab panels */
  $para = $variables['elements']['#paragraph'];
  $variables['attributes']['id'] = 'field-event-sub-page-tab-' . $para->id();
}

function ipu_tweaks_preprocess_paragraph__ipu_event_sessions(&$variables) {
  /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
  $paragraph = $variables['paragraph'];
  // Get the parent node? print_r($paragraph->getParentEntity()->toArray());
  // Get the parent bundle - a content type - in this case ipu_event
  //$parentBundle = $paragraph->getParentEntity()->bundle();

  // Create any new variables we might want.
  foreach ($variables['content']['field_ipu_event_session_dates'] as $key => $value) {
    //print $key.'<br/>';
  }
  $variables['content']['field_ipu_event_session_dates']['links'] = [];
  //print_r( $variables['content']['field_ipu_event_session_dates']);
  //$variables = [];

  // EXAMPLE CODE
  //Get the value of the image style and add it as a class on the image field.
  //$style_image = $paragraph->get('field_fc_sessions_closed_session')->value;
  //$variables['attributes']['class'][] = $style_image;

  $datetime = $paragraph->get('field_ipu_event_session_dates')->value;
  $datetime_to = $paragraph->get('field_ipu_event_session_dates')->end_value;
  //print 'PPP'.print_r($paragraph->get('field_ipu_event_session_dates')->getValue(), true).'QQQ';
  //$variables['datetime'] = $datetime;
  //$variables['content']['datetime_text']['#value'] = IpuEventUtils::get_event_session_datetime_text($datetime, $datetime_to, ' -  ', TRUE);

  //$variables['content'] = [];
  //$variables['links'] = [];
  //$variables['paragraph'] = [];
  //$variables['elements'] = [];
}

function ipu_tweaks_preprocess_field(&$variables) {

  // Split event start date into constituent parts
  if ($variables['element']['#field_name'] == 'field_ipu_event_dates') {
    if ($variables['element']['#view_mode'] == 'highlight') {
      foreach ($variables['items'] as &$item) {
        if (isset($item['content']['start_date']['#attributes']['datetime'])) {
          $start_date = strtotime($item['content']['start_date']['#attributes']['datetime']);
          $item['content']['start_date_d'] = format_date((int) $start_date, 'custom', 'd');
          $item['content']['start_date_M'] = format_date((int) $start_date, 'custom', 'M');
          $item['content']['start_date_Y'] = format_date((int) $start_date, 'custom', 'Y');
        }
      }
    }
  }
  if ($variables['element']['#field_name'] == 'field_event_date') {
    if ($variables['element']['#view_mode'] == 'highlight') {
    }
  }
  if ($variables['element']['#field_name'] == 'node_title' && $variables['element']['#bundle'] == 'landing_page') {
    //\Drupal::messenger()->addMessage('View mode'. print_r(array_keys($variables['element']),true));

    if ($variables['element']['#view_mode'] == 'full' || ($variables['element']['#view_mode'] == '_custom' && $variables['element']['#ds_view_mode'] == 'full')) {
      //\Drupal::messenger()->addMessage('View mode: '. print_r($variables['element']['#ds_view_mode'],true));
      $node = $variables['element']['#object'];
      // Should already be available $variables['#node'] = $node;

      $image = $node->field_media_image;
      if ($image->entity != NULL) {
        $image_path = $image->entity->getFileUri();
        $image_url = \Drupal\image\Entity\ImageStyle::load('max_1920x1920')
          ->buildUrl($image_path);
        $variables['attributes']['style'] = [];
        $variables['attributes']['style'][] = 'background-image: url("' . $image_url . '");';
        $theme_terms = $node->field_theme->getValue();
        if ($theme_terms != NULL) {
          $variables['attributes']['class'][] = 'theme-landing-page';
          foreach ($theme_terms as $term) {
            $variables['attributes']['class'][] = 'theme-term-id-' . $term['target_id'];
            $term_entity = \Drupal\taxonomy\Entity\Term::load($term['target_id']);
            $variables['theme_description'] = $term_entity->getDescription();
            $variables['title_suffix'] = '<h2>'.$term_entity->getDescription().'</h2>';
          }
        }
      }
    }
  }

  /*
   * Remove link from node titles on ipu_events where the flag has been set.
  */
  if ($variables['element']['#field_name'] == 'node_title' && $variables['element']['#bundle'] == 'ipu_event') {
    if ($variables['element']['#ds_view_mode'] != 'full') {
      //print_r(json_decode(json_encode($variables['element'])),true);
    }
  }
}

/**
 * Implements hook_field_attach_view_alter()
 */
function ipu_tweaks_entity_display_build_alter(&$output, $context) {
  // Check we're dealing with a paragraph field.
  if (!empty($output['paragraph'])) {

    // Check for specific paragraph field.
    if ($output['paragraph']['#field_name'] === 'field_event_sub_page') {
      // Alter the prefix. This is not working for some reason.
      //$output['paragraph']['#prefix'] = '<div class="field-collection-container clearfix vivienne">';
    }
  }

}

/* https://www.drupal.org/project/drupal/issues/2955321 */
function ipu_tweaks_entity_type_alter(array &$entity_types) {
  foreach ($entity_types as $entity_type) {
    $constraints = $entity_type->getConstraints();
    unset($constraints['EntityUntranslatableFields']);
    $entity_type->setConstraints($constraints);
  }
}

function ipu_tweaks_theme($existing, $type, $theme, $path) {
  return [
    'ipu-tweaks-data-points' => [
      'template' => 'ipu-tweaks-data-points',
      'path' => $path . '/templates',
      'variables' => [
        'stats' => '',
        'humanrights' => '',
        'womsn' => '',
        'under45' => '',
        'members' => '',
      ],
    ],
  ];
}


/*
 * Set the ipu_event > field_event_computed_date to the last possible date of the start of the event
 */
function ipu_tweaks_entity_presave(Drupal\Core\Entity\EntityInterface $entity) {

  if ($entity->getEntityTypeId() == 'node') {
    if ($entity->bundle() == 'ipu_event') {
      $accuracy = $entity->get('field_date_accuracy')->value;
      ipu_tweaks_update_computed_date($entity);
      \Drupal::messenger()
        ->addMessage('Event date accuracy is "' . $accuracy . '", so the computed date has been set to ' . print_r($entity->get('field_event_computed_date')->value, TRUE));
    }
  }
}

/*
 * Update ipu_event computed date based on start date and accuracy fields
 */
function ipu_tweaks_update_computed_date(&$entity) {
  $dates = $entity->get('field_ipu_event_dates')->getValue();
  //\Drupal::messenger()->addMessage('Date storage timezone ' . DateTimeItemInterface::STORAGE_TIMEZONE);
  //\Drupal::messenger()->addMessage('Date storage format ' . DateTimeItemInterface::DATE_STORAGE_FORMAT);

  //\Drupal::messenger()->addMessage('Dates: '. print_r($dates,true));
  foreach ($dates as $date) {
    $st = strtotime($date['value']);
    $start_date = new DateTime("@$st");
  }
  $accuracy = $entity->get('field_date_accuracy')->value;
  $computed_date = new DateTime();

  if ($accuracy == 'year') {
    $computed_date->setDate($start_date->format('Y'), 12, 31);
  }
  if ($accuracy == 'month') {
    // Get last day of this month.
    $computed_date->setDate($start_date->format('Y'), $start_date->format('m'), $start_date->format('t'));
  }
  if ($accuracy == 'day') {
    $computed_date = $start_date;
  };

  $dtime = DateTime::createFromFormat("Y-m-d", $computed_date->format('Y-m-d')); // not needed
  $dtime = $computed_date;
  $dtime->setTimezone(new \DateTimezone(drupal_get_user_timezone()));
  $dtimeFormat = $dtime->format(DateTimeItemInterface::DATE_STORAGE_FORMAT);
  // Doesn't work!!! $entity->set('field_event_sort_date', $computed_date->format('Y-m-d\T00:00:00'));
  $entity->set('field_event_computed_date', $dtimeFormat);
  return NULL;
}

/*
 * Disable the Event computed date on node add/edit forms
 */
function ipu_tweaks_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  switch ($form_id) {
    case 'node_ipu_event_edit_form':
      $form['field_event_computed_date']['#disabled'] = 'disabled';
      break;
  }
}

/**
 * Hide the page title for some node types while still showing it
 * on all other node types, and non-node pages.
 *
 * This is required, as hiding page title on any content types also hides on Views and other pages!
 * See https://www.drupal.org/project/drupal/issues/2887071
 *
 * Implements hook_block_access().
 */
use Drupal\Core\Session\AccountInterface;
use Drupal\node\NodeInterface;
use Drupal\Core\Access\AccessResult;
use Drupal\block\Entity\Block;
use Drupal\Core\Url;

function ipu_tweaks_block_access(Block $block, $operation, AccountInterface $account) {
  $disallowedTypes = [
    'article',
    'event',
    'ipu_event',
    'landing_page',
    'basic_page',
    'page',
    'section_page',
    'publication',
    'vacancy'
  ];

  if ($operation === 'view' && $block->getPluginId() == 'page_title_block') {
    $node = \Drupal::routeMatch()->getParameter('node');
    if ($node instanceof NodeInterface) {
      if (in_array($node->bundle(), $disallowedTypes)) {
        return AccessResult::forbidden();
      }
    }
    $current_url = Url::fromRoute('<current>');
    $path  = explode('/', $current_url->getInternalPath());
    if ($path[0] == 'parliament') {
      return AccessResult::forbidden();
    }
  }
  return AccessResult::neutral();
}