<?php

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Link;
use Drupal\Core\Url;
use Drupal\Component\Render\FormattableMarkup;
use Drupal\taxonomy\Entity\Vocabulary;
use Drupal\views\Views;


/**
 * Implements hook_help().
 */
function ipu_map_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.ipu_map':
      $link =  Link::fromTextAndUrl('ipu_map', Url::fromUri('internal:/ipu_map'));
      return t('
        <h2>IPU Map.</h2>
        <h3>Instructions</h3>
        <p>Creates a demo page for administrators at @s</p>
        ', array('@s'=> new FormattableMarkup($link->toString(), [])));
  }
}

function ipu_map_get_countries() {
  $config = \Drupal::config('ipu_map.settings');
  $vid = $config->get('vocabulary_id');
  $language_id =  \Drupal::languageManager()->getCurrentLanguage('language_content')->getId();
  $default_language_id = \Drupal::languageManager()->getDefaultLanguage()->getId();
  $vocab = \Drupal\taxonomy\Entity\Vocabulary::load($vid);

  $query = \Drupal::entityQuery('taxonomy_term');
  $query->condition('vid', $vid);
  $query->condition('langcode', $language_id); // This only works in that it get all terms with value in current lang.
  $query->sort('name');
  $tids = $query->execute();

  $terms = \Drupal\taxonomy\Entity\Term::loadMultiple($tids);
  $count = 0;

  // Need to get translations, and sort by name
  $term_names = [];
  $terms_sorted = [];
  foreach ($terms as &$term) {
    if ($language_id != $term->langcode) {
      if ($term->hasTranslation($language_id)) {
        $term = $term->getTranslation($language_id);
      }
    }
    $display = TRUE;
    // Only show parliaments which don't have a parent in the dropdown.
    if ($term->field_iso_code_for_parliament) {
      if ($term->field_iso_code_for_parliament->value != '') {
        // Doesn't appear in dropdown if has parent.
        $display = FALSE;
      }
    }

    if ($term->field_no_parliament_page->value == 1 ) {
      $display = FALSE;
    }

    if ($display) {
      $terms_sorted[$term->getName()] = $term;
      $term_names[] = $term->getName();
    }
  }
  // We need to sort French a little differently, to accommodate accents.
  if ($language_id == 'fr') {
    $coll = collator_create( 'fr_FR' );
    collator_sort($coll, $term_names);
  } else {
    asort($term_names);
  }
  $terms = [];
  foreach($term_names as $term_name) {
    $terms[] = $terms_sorted[$term_name];
  }
  return $terms;
}

function ipu_map_get_hub_link($country_tid) {
  $language_id =  \Drupal::languageManager()->getCurrentLanguage('language_content')->getId();

  // Get any Hub terms flagged with this country
  $result = \Drupal::entityQuery('taxonomy_term')
    ->condition('field_host_parliament.entity.tid', $country_tid)
    ->condition('vid', 'innovation_hub')
    ->execute();
  $term_options_list = [];
  if (!empty($result)) {
    foreach ($result as $tid) {
      $term = entity_load('taxonomy_term', $tid);
      if ($term->hasTranslation($language_id)) {
        $term = \Drupal::service('entity.repository')
          ->getTranslationFromContext($term, $language_id);
      }
      $term_options_list[$tid] = $term->name->value;
    }
    $alias = \Drupal::service('path.alias_manager')->getAliasByPath('/taxonomy/term/' . $tid);
    $link = Link::fromTextAndUrl($term_options_list[$tid], Url::fromUserInput($alias));
    $html = t('Host for %name innovation hub', ['%name' => $link->toString()]);

    $html .= '<div class="hub-description">'.$term->description->value.'</div>';
    $link = Link::fromTextAndUrl(t('Read more'), Url::fromUserInput($alias))->toRenderable();
    $link['#attributes'] = ['class' => ['btn', 'btn-sm', 'btn-outline-primary']];
    $html .= render($link);
    return $html;
  }
  return '';
}

function ipu_map_get_country_page() {

}
function ipu_map_get_parline_data($isocode, $description, $membership_status, $principles_signatory, $human_rights_cases, $current_language_id = 'en') {

  $data = [];
  $stats = [];

  $parline_url = 'https://data.ipu.org/api/node.json?type=country&field_country_data=' . $isocode;
  $link = Link::fromTextAndUrl($parline_url, Url::fromUri($parline_url));
  //\Drupal::messenger()->addStatus(t('Data from Parline: @s', ['@s' => new FormattableMarkup($link->toString(), [])]));

  $ch = curl_init();
  curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);
  curl_setopt($ch, CURLOPT_URL, $parline_url);

  try {
    $result = curl_exec($ch);
    $decoded = json_decode($result);
    if (sizeof($decoded->list) == 0) {
      \Drupal::messenger()->addStatus(t('Sorry, no data is available from Parline for @s', ['@s' => new FormattableMarkup($link->toString(), [])]));
    }
  } catch (exception $exception) {
    \Drupal::messenger()->addStatus(t('Sorry, no data is available from Parline for @s', ['@s' => new FormattableMarkup($link->toString(), [])]));
  }
  $chamber_nids = [];
  $data['#parliamentary_name'] = [];

  foreach ($decoded->list as $chamber) {
    // TODO Multilingual
    // TODO Add fields from https://data.ipu.org/node/53/basic-information/contact-details?chamber_id=13379

    // Use the English url as the FR one isn't working?
    if ($chamber->language == $current_language_id) {
      $stats['#url'] = $chamber->source->uri;   //$chamber->url;
      //print '<pre>'.print_r($chamber,TRUE).'</pre>';
      // Some fields are common across languages...as they are non-lang specific.
      $stats['#population_in_millions'] = number_format(round($chamber->field_population_in_thousands / 1000, 4), 2, '.', '');
      // Some have multiple values and so are passed as an arrey
      $stats['#structure_of_parliament'] = $chamber->field_structure_of_parliament;
      if ($chamber->parliamentary_name) {
        $data['#parliamentary_name'][] = $chamber->parliamentary_name;
      }
      $chamber_nids[] = $chamber->nid;
    }
  }

  // Now get the data from the chamber. We only need one language version
  // of these, as they are the same figures in both.
  $stats['#chambers'] = [];
  $election_nid = 0;
  foreach ($chamber_nids as $chamber_nid) {
    $chamber_url = 'https://data.ipu.org/api/node.json?type=chamber&field_country=' . $chamber_nid;
    curl_setopt($ch, CURLOPT_URL, $chamber_url);
    $result = curl_exec($ch);
    $decoded = json_decode($result);
    $link = Link::fromTextAndUrl($chamber_url, Url::fromUri($chamber_url));
    //\Drupal::messenger()->addStatus(t('Secondary Data from Parline: @s', ['@s' => new FormattableMarkup($link->toString(), [])]));

    foreach ($decoded->list as $key => $chamber) {
      // TODO: Get contact details (of secretary general?) Forbidden, cannot use
      /* $gen_sec_id = $chamber->field_general_secretary->id;
      e.g. 3162.
      $gen_sec_url = 'https://data.ipu.org/api/field_collection_item.json?item_id=' . $gen_sec_id;
      curl_setopt($ch, CURLOPT_URL, $gen_sec_url);
      */
      /*if ($chamber->field_chamber_name) {
        $data['#parliamentary_name'][] = $chamber->field_chamber_name;
      }*/
      if ($chamber->field_struct_parl_status->id != 17) {
        if ($chamber->chamber_name) {
          $data['#parliamentary_name'][] = $chamber->chamber_name;
        }
        if ($chamber->field_parliamentary_website_url) {
          foreach($chamber->field_parliamentary_website_url as $url) {
            $url_txt = str_ireplace('http://', '', str_ireplace('https://','', $url->value));
            $url_txt = rtrim($url_txt,"/");
            $weblink = Link::fromTextAndUrl($url_txt, Url::fromUri($url->value));
            $stats['#website_link'][] = new FormattableMarkup($weblink->toString(), []);
          }
        } else {
          $stats['#website_link'] = 'Not available';
        }
      }

      $stats['#chambers'][] = array(
        'struct_parl_status' => $chamber->field_struct_parl_status->id,
        'parliament_house' => (($chamber->field_struct_parl_status->id == 17) ? t('Upper') : t('Lower')),
      );
      if ($chamber->field_struct_parl_status->id != 17) {
        $stats['#members_per_country'] = $chamber->field_statutory_members_number;
        $data['#current_women_percent'] = $chamber->current_women_percent;
        $data['#total_younger_45_percentage'] = $chamber->total_younger_45_percentage;
        $election_nid = $chamber->latest_election->id;
      }
    };
  }

  // Get election data
  if ($election_nid != 0) {
    $election_url = 'https://data.ipu.org/api/node.json?nid=' . $election_nid;
    curl_setopt($ch, CURLOPT_URL, $election_url);
    $result = curl_exec($ch);
    $decoded = json_decode($result);
    foreach ($decoded->list as $key => $election_date) {
      if ($election_date->field_election_date->value) {
        $stats['#last_election_date'] = date('M Y', $election_date->field_election_date->value);
      }
    }
    curl_close($ch);
  }


  $config = \Drupal::config('ipu_map.settings');

  // Convert the EN link to FR if required.
  if ($current_language_id != 'en') {
    $stats['#url'] = str_ireplace('/api/', '/'. $current_language_id . '/', $stats['#url']);
  } else {
    $stats['#url'] = str_ireplace('/api/', '/', $stats['#url']);
  }
  $stats['#url'] = str_ireplace('.json', '', $stats['#url']);

  $stats['#membership_status'] = ($membership_status ? true : false);
  $stats['#membership_status_text'] = ($membership_status ? t('Is an IPU member') : t('Is not an PU member'));
  $stats['#principles_signatory'] = ($principles_signatory ? true : false);
  $stats['#principles_signatory_text'] = ($principles_signatory ? t('Is a principles signatory') : t('Not a principles signatory'));

  $data['#human_rights_cases'] = ($human_rights_cases ? $human_rights_cases : 0);
  $data['#description'] = $description;

  $data['#ipu_map_gender_link'] = ($config->get('ipu_map_gender_link') ? (($current_language_id != 'en') ? '/'. $current_language_id : '') . \Drupal::service('path.alias_manager')->getAliasByPath($config->get('ipu_map_gender_link'), $current_language_id) : '');
  $data['#ipu_map_youth_link'] = ($config->get('ipu_map_youth_link') ? (($current_language_id != 'en') ? '/'. $current_language_id : '') . \Drupal::service('path.alias_manager')->getAliasByPath($config->get('ipu_map_youth_link'), $current_language_id) : '');
  $data['#ipu_map_hr_link'] = ($config->get('ipu_map_hr_link') ? (($current_language_id != 'en') ? '/'. $current_language_id : '') . \Drupal::service('path.alias_manager')->getAliasByPath($config->get('ipu_map_hr_link'), $current_language_id) : '');
  $data['#ipu_map_hr_text'] = ($config->get('ipu_map_hr_text') ? (($current_language_id != 'en') ? '/'. $current_language_id : '') . \Drupal::service('path.alias_manager')->getAliasByPath($config->get('ipu_map_hr_text'), $current_language_id) : '');
  $data['#parliamentary_name'] = array_unique($data['#parliamentary_name']);

  $data_provenance = $config->get('ipu_map_data_provenance');

  $stats['#data_provenance'] = [
    '#type' => 'processed_text',
    '#text' => t($data_provenance['value']),
    '#format' => $data_provenance['format'],
  ];

  $data['#theme'] = 'ipu-map-parline-data';
  $stats['#theme'] = 'ipu-map-country-stats';
  return ['data' => $data, 'country_stats' => $stats];
}

/*
 * Pass country tid and document type to documents view.
 */
function ipu_map_get_hr_documents($args) {
  $checkempty = views_get_view_result('documents', 'multiple_ids_recent', implode(',',$args));
  if (!empty($checkempty)) {
    $view = views_embed_view('documents', 'multiple_ids_recent', implode(',',$args));
  } else {
    $view = [];
  }
  return [$view, count($checkempty)];
}


function ipu_map_get_country_news($country_term_id, $regions) {
  // NOT USED: Uses an in-built view. We use the pre_reneder below to change the sort order here.
  $checkempty = views_get_view_result('articles', 'latest_4_country', $country_term_id);
  /*$checkregionempty = views_get_view_result('articles', 'latest_4_by_region', $country_term_id);*/

  if (!empty($checkempty)) {
    $view = views_embed_view('articles', 'latest_4_country', $country_term_id);
  } else {
    $view = [];
  }
  /*if (!empty($checkregionempty)) {
    $region_view = views_embed_view('articles', 'latest_4_by_region', $regions);;
  }*/
  return $view;
}
function ipu_map_get_innovation_tracker_stories($country_term_id) {
  $checkempty = views_get_view_result('innovation_tracker_story', 'latest_3_country', $country_term_id);
  if (!empty($checkempty)) {
    $view = views_embed_view('innovation_tracker_story', 'latest_3_country', $country_term_id);
  } else {
    $view = [];
  }
  return $view;
}
function ipu_map_get_country_case_studies($country_term_id) {
  $checkempty = views_get_view_result('articles', 'latest_3_case_country', $country_term_id);
  if (!empty($checkempty)) {
      return views_embed_view('articles', 'latest_3_case_country', $country_term_id);
  }
  return false;
}
function ipu_map_get_geogroups($geo_term_ids) {
  $checkempty = views_get_view_result('geopolitical_group', 'node_by_geo_id', $geo_term_ids);
  if (!empty($checkempty)) {
    return views_embed_view('geopolitical_group', 'node_by_geo_id', $geo_term_ids);
  }
  return false;
}
function ipu_map_get_events($country_term_id) {
  $checkempty = views_get_view_result('events', 'latest_2_events_country', $country_term_id);
  if (!empty($checkempty)) {
    return views_embed_view('events', 'latest_2_events_country', $country_term_id);
  }
}
function ipu_map_get_countries_region($regions) {
  $checkempty = views_get_view_result('countries', 'block_countries_region', $regions);
  if (!empty($checkempty)) {
    return views_embed_view('countries', 'block_countries_region', $regions);
  }
}

function ipu_map_get_callout() {
  $element = [];
  $link = \Drupal::service('path.alias_manager')->getAliasByPath('/node/174', \Drupal::languageManager()->getCurrentLanguage('language_content')->getId());
  $link_text = t('Get in touch');
  $element['#title'] = t('Support for your parliament');
  $element['#description'] = 'Contact us for more information on how we can support your parliament';
  $element['#link'] = $link;
  $element['#link_text'] = $link_text;
  $element['#theme'] = 'ipu-map-callout';
  return $element;

}

/*
 * template_preprocess_views_view_field
 *
 * @param $variables
 *
 * Replace the url in countries views country name fields to link to the french version of the parliament page
 */
function ipu_map_preprocess_views_view_field(&$variables) {

  $view = $variables['view'];
  $field = $variables['field'];
  $language_id =  \Drupal::languageManager()->getCurrentLanguage('language_content')->getId();

  if ($view->storage->id() == 'countries') {
    if ($view->current_display == 'block_parliaments' || $view->current_display == 'block_members' || $view->current_display == 'block_geo_members' ) {
      if ($field->field == 'name') {
        if ($language_id == 'fr') {
          $term = $variables['row']->_entity;
          $isocode = $term->get('field_iso_code')->value;
          $variables['output'] = \Drupal\Core\Render\Markup::create(str_ireplace('/parliament/', '/fr/parlement/', $variables['output']));
        }
      }
    }
  }
}

function ipu_map_views_pre_render(\Drupal\views\ViewExecutable $view) {


  // Change the order of the news items; show the features first, if there are any, in the last 4 items.
//  if ($view->id() == 'articles') {
//    if ($view->current_display == 'latest_4_news_pr_country') {
//      $sorted_view = [];
//      foreach ($view->result as $key => $result) {
//        //print_r($result->_entity->toArray());
//        $type = $result->_entity->get('field_article_type')->entity->name->value;
//        $type .= $result->_entity->get('created')->value;
//        $sorted_view[$type] = $result;
//      }
//
//      krsort($sorted_view);
//      $view->result = $sorted_view; //$update_view;
//    }
//    return $view;
//  }
}

function ipu_map_get_flag($isocode) {
  if (strtolower($isocode) == 'mm') {
    $flag_url = 'http://data.un.org/en/flags/mmr_flag.png';
  } else {
    $flag_url = ipu_map_get_flag_url($isocode);
  }
  $element = [];
  $element['#flag_url'] = $flag_url;
  $element['#theme'] = 'ipu-map-flag';
  return $element;
}

function ipu_map_get_data() {
  // Get list of countries as JSON or XML.
  // This comes from a view
  $url = 'data/countries.json';
  $url = 'data/countries.xml';
}

function ipu_map_get_data_from_view() {
  // Get list of countries as JSON or XML.
  // This comes from a view
  $data = '';
  $view = Views::getView('map_data');
  if (is_object($view)) {
    // json or xml. We choose XML
    $view->setDisplay('data_export_countries_json');
    $view->preExecute();
    $view->execute();
    //$data = simplexml_load_string($view->render()['#markup']);
    $data = $view->render()['#markup'];
  }
  return $data;
}
/* Get a flag image url from ISO code */
function ipu_map_get_flag_url($isocode) {
  $geonames_url = 'https://img.geonames.org/flags/x/' . trim(strtolower($isocode)) . '.gif';
  return $geonames_url;

}

function ipu_map_theme($existing, $type, $theme, $path) {
  return array(
    'ipu-map-parline-data' => array(
      'template' => 'ipu-map-parline-data',
      'path' => $path . '/templates',
      'variables' => array(
        'human_rights_cases' => '',
        'parliamentary_name' => '',
        'description' => '',
        'current_women_percent' => '',
        'total_younger_45_percentage' => '',
        'ipu_map_gender_link' => '',
        'ipu_map_youth_link' => '',
        'ipu_map_hr_link' => '',
        'ipu_map_hr_text' => '',
      ),
    ),
    'ipu-map-country-stats' => array(
      'template' => 'ipu-map-country-stats',
      'path' => $path . '/templates',
      'variables' => array(
        'population_in_millions' => '',
        'members_per_country' => '',
        'structure_of_parliament' => '',
        'membership_status' => '',
        'membership_status_text' => '',
        'principles_signatory' => '',
        'principles_signatory_text' => '',
        'description' => '',
        'chambers' => [],
        'flag' => '',
        'url' => '',
        'website_link' => '',
        'last_election_date' => '',
        'data_provenance' => '',
        'hub_link' => '',
      ),
    ),
    'ipu-map-flag' => array(
      'template' => 'ipu-map-flag',
      'path' => $path . '/templates',
      'variables' => array(
        'flag_url' => '',
      ),
    ),
    'ipu-map-callout' => array(
      'template' => 'ipu-map-callout',
      'path' => $path . '/templates',
      'variables' => array(
        'link' => '',
        'link_text' => '',
        'title' => '',
        'description' => ''
      ),
    ),
    'ipu-map-country' => array(
      'template' => 'ipu-map-country',
      'render element' => 'build',
      'path' => $path . '/templates',
      'variables' => array(
        'content' => '',
      ),
    ),
  );
}

