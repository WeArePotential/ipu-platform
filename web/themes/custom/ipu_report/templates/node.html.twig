{#
/**
 * @file
 * Bootstrap Barrio's theme implementation to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
     Only "getter" methods (method names starting with "get", "has", or "is")
     and a few common methods such as "id" and "label" are available. Calling
     other methods (such as node.delete) will result in an exception.
 * - label: The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: Themed creation date field.
 * - author_name: Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_node()
 */
#}
{{ attach_library('bootstrap_barrio/node') }}

{%
  set classes = [
    'node',
    'node--type-' ~ node.bundle|clean_class,
    node.isPromoted() ? 'node--promoted',
    node.isSticky() ? 'node--sticky',
    not node.isPublished() ? 'node--unpublished',
    view_mode ? 'node--view-mode-' ~ view_mode|clean_class,
    'clearfix',
  ]
%}



<article{{ attributes.addClass(classes) }}>
  <header>
    {{ title_prefix }}
    {% if not page %}
      <h2{{ title_attributes.addClass('node__title') }}>
        <a href="{{ url }}" rel="bookmark">{{ label }}</a>
      </h2>
    {% endif %}
    {{ title_suffix }}
    {% if display_submitted %}
      <div class="node__meta">
        {{ author_picture }}
        {% block submitted %}
          <em{{ author_attributes }}>
            {% trans %}Submitted by {{ author_name }} on {{ date }}{% endtrans %}
          </em>
        {% endblock %}
        {{ metadata }}
      </div>
    {% endif %}
  </header>

  <div{{ content_attributes.addClass('node__content', 'clearfix') }}>

    {# Back pages - check if it's a Report, and if it has any sections (front page has none) #}

    {% if node.bundle == 'report' and content.field_section['#items']|length > 0 %}

    <div id="report-page-top" class="container-fluid">
      <div class="container pt-5">
        <div class="row">
          <div class="col-md-6">
            {% for key, item in content.field_section if key|first != '#' %}
              <div class="report-section">
                <div class="row item-{{ key + 1 }}">{{ item }}</div>
              </div>
            {% endfor %}
          </div>
          <div class="col-md-6">
            <div class="report-page-introduction">{{ content.body.0 }}</div>
          </div>
        </div>
      </div>
    </div>

    {% else %}

    <div id="report-page-top" class="container-fluid">
      <div class="container">
       <div class="row my-auto">
          <div class="col-md-7 report-page-top-left align-self-center">
            {% if node.bundle == 'report'  %}
              <h1 class="report-header">{{ node.label }}</h1>
            {% else %}
              <h1>{{ node.label }}</h1>
                <h2><span class="term-icon term-icon-{{ node.field_theme.0.target_id }}"></span>{{ node.field_subtitle.value }}</h2>
              {% endif %}

            {{ content.field_key_figure }}
            <div class="report-page-introduction">{{ content.body.0 }}</div>
            {%  if node.bundle == 'report_section'  %}
            <div class="more-sections">
              <a href="#report-sections" type="button" class="wow animate__animated animate__bounce" data-wow-duration="2s" data-wow-delay="1s"><span class="btn btn-default btn-circle btn-next"><i class="fas fa-angle-down"></i></span></a>
            </div>
              <p>&nbsp;</p>
            {% endif %}

          </div>
            <div class="col-md-5 position-relative" >
              <div class="report-page-image"
                {% if content.field_image is defined and content.field_image is not empty %}
                  {% if content.field_image['#items'].entity.uri.value %}
                  style="background-image: url('{{ file_url(content.field_image['#items'].entity.uri.value | image_style('max_1300x1300')) }}'); background-size: cover;"
                  {% endif %}
                {% endif %}
              >&nbsp;
              </div>
              <div class="image-caption-overlay">{{ content.field_image['#items'][0].alt }}</div>
            </div>
        </div>

      </div>
    </div>

    <div id="inpage-nav" class="container sticky-top">
      <!--a class="navbar-brand" href="#">Navbar</a-->
      <div class="row">

      <nav id="navbar-sections" class="col-2 navbar navbar-light bg-light">
        <ul class="nav flex-column nav-stacked">
          {% set contenttype = "" %}
          {% set report_done = FALSE %}
          {% for key, item in content.field_section if key|first != '#' %}
            {% set paragraph_id = item['#paragraph'].id.value %}
            {% set content_type = item['#paragraph'].field_content_type.0.value %}
            {% set content_label = item['#paragraph'].field_content_type.getSettings('allowed_values')['allowed_values'][content_type] %}
            {% if content_type != 'image' and (report_done == FALSE or content_type != 'report') %}
              <li class="nav-item">
                <a class="nav-link" href="#report-section-{{ paragraph_id }}">{{ content_label }}</a>
              </li>
            {% endif %}
            {% if content_type == 'report' %}
              {% set report_done = TRUE %}
            {% endif %}
          {% endfor %}

        </ul>
      </nav>

{#    <div class="key">{{ node.key_figure }}</div>#}
      </div>
    </div>
    <div id="report-sections" class="report-sections">
    {% for key, item in content.field_section if key|first != '#' %}
      <div class="report-section container-fluid">
        <div class="row item-{{ key + 1 }}">{{ item }}</div>
      </div>
    {% endfor %}
    </div>
{#    {{ content }}#}



  </div>

  {% endif %}

</article>
