<?php
/**
 * @file
 * Theme functions
 */
use Drupal\Component\Utility\Html;

// Include all files from the includes directory.
$includes_path = dirname(__FILE__) . '/includes/*.inc';
foreach (glob($includes_path) as $filename) {
  require_once dirname(__FILE__) . '/includes/' . basename($filename);
}

/**
 * Implements template_preprocess_html().
 */
function ipu_preprocess_html(&$variables) {
  if (isset($variables['node_type'])) {
    // Add node-TYPE class to the <body> element.
    $variables['attributes']['class'][] = ('node-' . $variables['node_type']);
  }
  if (isset($variables['node_id'])) {
    $variables['attributes']['class'][] = ('node-' . $variables['node_id']);
  }
  $node = \Drupal::routeMatch()->getParameter('node');
  if ($node) {
    $variables['attributes']['class'][] = ('node-' . $node->id());
  }
 if (\Drupal::routeMatch()->getRouteName() == 'entity.taxonomy_term.canonical') {
    // load the term entity and get the data from there
    $term = \Drupal::routeMatch()->getParameter('taxonomy_term');
    $variables['term_id'] = $term->id();
    $variables['vocabulary_id'] = $term->bundle();
    $variables['attributes']['class'][] = 'taxonomy-list-'. Html::cleanCssIdentifier($term->bundle());
  }
}

/**
 * Add variables for the view field so we know which view it is displaying and
 * can add as classes in twig.
 */
function ipu_preprocess_viewfield_item(&$variables) {
  $element = &$variables['element'];
  $variables['view_id'] = $element['#view_id'];
  $variables['display_id'] = $element['#display_id'];
}

function ipu_preprocess_field(&$variables) {

  if ($variables['field_name'] == 'field_media_image') {

    if ($variables['element']['#view_mode'] == 'highlight') {

      $node = $variables['element']['#object'];
      //$field_image = field_get_items('node', $node, 'field_media_image');
      //if (!$paragraph->field_my_image_field->isEmpty()) {
      /*$image = $node->field_media_image->entity->url();
      $variables['attributes']['style'][] = 'background-image: url("' . $image . '");';
      $variables['attributes']['style'][] = 'background-size: cover;';
      $variables['attributes']['style'][] = 'background-position: center center;';
      */
    }
  }

  if ($variables['field_name'] == 'field_ipu_event_dates') {
    if ($variables['element']['#view_mode'] == 'highlight') {
      $variables['peter'] = 'Event date';
    }
  }
}

function ipu_preprocess_page_title(&$variables) {
  if ($node = \Drupal::routeMatch()->getParameter('node')) {
    if (isset($node->field_media_image)) {
      $variables['page_title_image'] = $node->get('field_media_image')
        ->view('full');
    }
  }
}

// Background image for Callout paragraphs
use Drupal\file\Entity\File;
use Drupal\image\Entity\ImageStyle;
function ipu_preprocess_paragraph__callout_strip(&$variables) {
  $paragraph = $variables['paragraph'];
  if (!$paragraph->field_background_image->isEmpty()) {

    $fid = $paragraph->field_background_image->target_id;
    $file = File::load($fid);
    $file_uri = $file->getFileUri();
    // With the URI, generate a url for non-image style background image.
    $image_path = file_url_transform_relative(file_create_url($file_uri));
    $variables['background_image_url'] = $image_path;
    $url_with_style = ImageStyle::load('medium')->buildUrl($file_uri);
    $variables['background_image_url_styled'] = $url_with_style;
//    $variables['attributes']['style'][] = 'background-image: url("' . $image_path. '");';
//    $variables['attributes']['style'][] = 'background-size: auto 100%;';
//    $variables['attributes']['style'][] = 'background-position: center right;';
//    $variables['attributes']['style'][] = 'background-repeat: no-repeat;';
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function ipu_theme_suggestions_field_alter(&$suggestions, $variables) {
  // Add view mode to field template suggestions.
  $element = $variables['element'];

  $field_name = $element['#field_name'];
  $view_mode = $element['#view_mode'];
  $entity_type = $element['#entity_type'];
  $bundle = $element['#bundle'];

  $suggestions[] = 'field__' . $field_name . '__' . $view_mode;
  $suggestions[] = 'field__' . $entity_type . '__' . $field_name . '__' . $view_mode;
  $suggestions[] = 'field__' . $entity_type . '__' . $bundle . '__' . $field_name . '__' . $view_mode;
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function ipu_theme_suggestions_container_alter(&$suggestions, $variables) {
  // Add template suggestions for views since we need to get rid of that damn container div
  // around the event sub pages view to get the BS tabs to work properly in the event template.
  if (isset($variables['element']['#view'])) {
    if (isset($variables['element']['#name'])) {
      $suggestions[] = 'container__views__' . $variables['element']['#name'];
    }
  }
}

/**
 * Implements hook_theme_registry_alter().
 *
 * @param $theme_registry
 */
function ipu_theme_registry_alter(&$theme_registry) {
  $theme_registry['menu']['variables']['top_parent'] = [];
}

/**
 * Implements hook_preprocess_block__menu_block().
 *
 * @param $variables
 */
function ipu_preprocess_block__menu_block(&$variables) {
  //print '<pre>'.print_r(array_keys($variables), true).'</pre>';
  //print '<pre>'.print_r(json_decode(json_encode($variables['elements')), true).'</pre>';

//  foreach (['id', 'plugin_id', 'base_plugin_id', 'derivative_plugin_id', 'current_path'] as $field) {
//    if (!empty(($variables[$field]))) {
//      print '<pre>' . print_r(($variables[$field]), TRUE) . '</pre>';
//    }
//  }

  if (!empty($variables['elements']['content']['#items'])) {
    $variables['content']['#top_parent'] = [
      'current_path' => $variables['current_path'] ? $variables['current_path'] : '',
    ];
  }

  // code removed

}

/*
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function ipu_theme_suggestions_eva_display_entity_view_alter(&$suggestions, $variables) {
  // We don't seem to get any template suggestions from EVA, so let's add some.
  /** @var $view Drupal\views\ViewExecutable **/
  $view = $variables['view'];
  $suggestions[] = 'eva_display_entity_view__' . $view->id();
  $suggestions[] = 'eva_display_entity_view__' . $view->id() . '__' . $view->current_display;
}

/**
 * Implements template_preprocess_views_view_unformatted().
 */
function ipu_preprocess_views_view_unformatted(&$variables) {
  $view = $variables['view'];
  $displays = [
    'sub_page_content_eva',
    'sub_page_content_eva_2',
  ];
  if ($view->id() == "event_sub_pages" && in_array($view->current_display, $displays)) {
    // Add a Paragraph ID variable to the row.
    foreach ($variables['rows'] as $index => $row) {
      $variables['rows'][$index]['id'] = $row['content']['#paragraph']->id();
    }
  }

}

/**
 * Implements template_preprocess_views_view().
 */
function ipu_preprocess_views_view(&$variables) {


  $view = $variables['view'];
  if ($view->id() == 'countries' && in_array($view->current_display, ['block_parliaments', 'block_members'])) {
    foreach ($variables['rows'] as $index => $row) {
      //$variables['rows'][$index]['field_iso_code_for_parliament'] =
      foreach($row['#rows'] as $rowindex => $country) {
        //print_r(array_keys($country));
        if ($country['#row']->taxonomy_term__field_iso_code_for_parliament_field_iso_code_ != '') {
          //$country['#row'] = NULL;
          $variables['rows'][$index]['#rows'][$rowindex] = NULL;
        }
        //print_r(json_decode(json_encode($country['#row'])));
      }
      //print_r($row['field_iso_code_for_parliament']);
    }
  };

}